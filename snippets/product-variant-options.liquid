{% comment %}
  Renders product variant options

  Accepts:
  - product: {Object} product object.
  - option: {Object} current product_option object.
  - block: {Object} block object.
  - picker_type: {String} type of picker to display

  Usage:
  {% render 'product-variant-options',
    product: product,
    option: option,
    block: block,
    picker_type: picker_type
  %}
{% endcomment %}
{%- liquid
  assign product_form_id = 'product-form-' | append: section.id
-%}

{% assign first_available_val = 0 %}
{%- for value in option.values -%}
  {%- liquid
    assign swatch_focal_point = null
    if value.swatch.image
      assign image_url = value.swatch.image | image_url: width: 50
      assign swatch_value = 'url(' | append: image_url | append: ')'
      assign swatch_focal_point = value.swatch.image.presentation.focal_point
    elsif value.swatch.color
      assign swatch_value = 'rgb(' | append: value.swatch.color.rgb | append: ')'
    else
      assign swatch_value = null
    endif

    assign option_disabled = true
    if value.available
      assign option_disabled = false
    endif
  -%}

  {%- capture input_id -%}
    {{ section.id }}-{{ option.position }}-{{ forloop.index0 -}}
  {%- endcapture -%}

  {%- capture input_name -%}
    {{ option.name }}-{{ option.position }}
  {%- endcapture -%}

  {%- capture input_dataset -%}
    data-product-url="{{ value.product_url }}"
    data-option-value-id="{{ value.id }}"
  {%- endcapture -%}

  {%- capture label_unavailable -%}
    <span class="visually-hidden label-unavailable">
      {{- 'products.product.variant_sold_out_or_unavailable' | t -}}
    </span>
  {%- endcapture -%}

  {%- if picker_type == 'swatch' -%}
    {%- capture help_text -%}
      <span class="visually-hidden">{{ value | escape }}</span>
      {{ label_unavailable }}
    {%- endcapture -%}
    {%
      render 'swatch-input',
      id: input_id,
      name: input_name,
      value: value | escape,
      swatch: value.swatch,
      product_form_id: product_form_id,
      checked: value.selected,
      visually_disabled: option_disabled,
      shape: block.settings.swatch_shape,
      help_text: help_text,
      additional_props: input_dataset
    %}
  {%- elsif picker_type == 'button' -%}
    <input
      type="radio"
      id="{{ input_id }}"
      name="{{ input_name | escape }}"
      value="{{ value | escape }}"
      form="{{ product_form_id }}"
      {% if value.selected %}
        checked
      {% endif %}
      {% if option_disabled %}
        class="disabled" style="display:none;"
      {% endif %}
      {{ input_dataset }}
    >
    <label for="{{ input_id }}">
      {{ value -}}
      {{ label_unavailable }}
    </label>
  {%- elsif picker_type == 'dropdown' or picker_type == 'swatch_dropdown' -%}
    <option
      id="{{ input_id }}"
      value="{{ value | escape }}"
      {% if value.selected %}
          selected="selected"
      {% endif %}  
      {% if swatch_value and picker_type == 'swatch_dropdown' %}
        data-option-swatch-value="{{ swatch_value }}"
        {% if swatch_focal_point %}
          data-option-swatch-focal-point="{{ swatch_focal_point }}"
        {% endif %}
      {% endif %}
      {{ input_dataset }}
      style="{% if option_disabled %}display:none;{% endif %}"
      class="{% if option_disabled %}disabled_option{% else %}available_option{% endif %}"
    >
      {% if option_disabled -%}
        {% comment %} 
          {{- 'products.product.value_unavailable' | t: option_value: value -}}
        {% endcomment %}
      {%- else -%}
        {{- value -}}
      {%- endif %}
    </option>

    {% if option_disabled == false %}
      {% assign first_available_val = first_available_val | plus: 1 %}
    {% endif %}
    
  {%- endif -%}
{%- endfor -%}
 <script>
  // Initialize variant auto-switcher
  function initVariantAutoSwitch() {
    // Get all variant option containers
    const variantSelects = document.querySelectorAll('variant-selects');
    
    variantSelects.forEach(container => {
      // Listen for changes in any option selector
      container.addEventListener('change', function(event) {
        const target = event.target;
        // Handle dropdown selects
        if (target.tagName === 'SELECT') {
          const selectedOption = target.options[target.selectedIndex];
          if (selectedOption.classList.contains('disabled_option')) {
            // Remove selection from the disabled option
            selectedOption.selected = false;
            // Find the first available option
            const firstAvailable = target.querySelector('option:not(.disabled_option)');
            if (firstAvailable) {
              firstAvailable.selected = true;
              target.value = firstAvailable.value;
              console.log(firstAvailable, 'available');
              setTimeout(() => {
                const addToCartButton = document.querySelector('.product-form__submit.button');
                addToCartButton.removeAttribute("disabled");
                target.setAttribute('selected', 'selected')
                addToCartButton.querySelector('span').textContent = 'In den Warenkorb';
              }, 20);
              target.dispatchEvent(new Event('change', { bubbles: true }));
            }
          }
        }
        
        // Handle radio buttons
        if (target.type === 'radio') {
          if (target.classList.contains('disabled')) {
            const radioGroup = document.querySelectorAll(`input[name="${target.name}"]`);
            const firstAvailable = Array.from(radioGroup).find(radio => 
              !radio.classList.contains('disabled')
            );
            if (firstAvailable) {
              firstAvailable.checked = true;
              firstAvailable.classList.remove('disabled');
              setTimeout(() => {
                const addToCartButton = document.querySelector('.product-form__submit.button');
                addToCartButton.removeAttribute("disabled");
                target.setAttribute('selected', 'selected')
                addToCartButton.querySelector('span').textContent = 'In den Warenkorb';
              }, 20);
              firstAvailable.dispatchEvent(new Event('change', { bubbles: true }));            
            }
          }
        }
      });
    });

    // Initial check for pre-selected disabled options
    document.querySelectorAll('select, input[type="radio"]').forEach(input => {
      if ((input.tagName === 'SELECT' && input.querySelector('option:checked.disabled_option')) || 
          (input.type === 'radio' && input.checked && input.classList.contains('disabled'))) {
        input.dispatchEvent(new Event('change', { bubbles: true }));
      }
    });
  }
  // Initialize when variant controls exist
  if (document.querySelector('variant-selects')) {
    initVariantAutoSwitch();
  }
</script> 