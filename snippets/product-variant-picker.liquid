{% comment %}
  Renders product variant-picker

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  Usage:
  {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}
{%- unless product.has_only_default_variant -%}
  <variant-selects
    id="variant-selects-{{ section.id }}"
    data-section="{{ section.id }}"
    {{ block.shopify_attributes }}
  >
    {%- for option in product.options_with_values -%}
      {%- liquid
        assign swatch_count = option.values | map: 'swatch' | compact | size
        assign picker_type = block.settings.picker_type

        if swatch_count > 0 and block.settings.swatch_shape != 'none'
          if block.settings.picker_type == 'dropdown'
            assign picker_type = 'swatch_dropdown'
          else
            assign picker_type = 'swatch'
          endif
        endif
      -%}
      {%- if picker_type == 'swatch' -%}
        <fieldset class="js product-form__input product-form__input--swatch">
          <legend class="form__label">
            {{ option.name }}:
            <span data-selected-value>
              {{- option.selected_value -}}
            </span>
          </legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- elsif picker_type == 'button' -%}
        <fieldset class="js product-form__input product-form__input--pill">
          <legend class="form__label">{{ option.name }}</legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- else -%}
        <div class="product-form__input product-form__input--dropdown">
          <label class="form__label" for="Option-{{ section.id }}-{{ forloop.index0 }}">
            {{ option.name }}
          </label>
          <div class="select">
            {%- if picker_type == 'swatch_dropdown' -%}
              <span
                data-selected-value
                class="dropdown-swatch"
              >
                {% render 'swatch', swatch: option.selected_value.swatch, shape: block.settings.swatch_shape %}
              </span>
            {%- endif -%}
            <select
              id="Option-{{ section.id }}-{{ forloop.index0 }}"
              class="select__select"
              name="options[{{ option.name | escape }}]"
              form="{{ product_form_id }}"
            >
              <option class="first-select-option disabled_option">{{ 'products.product.select_option' | t: option_name: option.name }}</option>
              {% render 'product-variant-options',
                product: product,
                option: option,
                block: block,
                picker_type: picker_type
              %}
            </select>
            <span class="svg-wrapper">
              {{- 'icon-caret.svg' | inline_asset_content -}}
            </span>
          </div>
        </div>
      {%- endif -%}
    {%- endfor -%}

    <script type="application/json" data-selected-variant>
      {{ product.selected_or_first_available_variant | json }}
    </script>
  </variant-selects>
{%- endunless -%}
 <script>
  // Initialize variant auto-switcher
  function initVariantAutoSwitch() {
    // Get all variant option containers
    const variantSelects = document.querySelectorAll('variant-selects');
    
    variantSelects.forEach(container => {
      // Listen for changes in any option selector
      
      container.addEventListener('change', function(event) {
        const target = event.target;
        // Handle dropdown selects
        
        if (target.tagName === 'SELECT') {
          const selectedOption = target.options[target.selectedIndex];
          document.querySelector('.product-form__submit.button').classList.remove('disabled');
          if (selectedOption.classList.contains('disabled_option')) {
            // Remove selection from the disabled option
            selectedOption.selected = false;
            // Find the first available option
            const firstAvailable = target.querySelector('option:not(.disabled_option)');
            
            if (firstAvailable) {
              firstAvailable.selected = true;
              target.value = firstAvailable.value;
              console.log(firstAvailable, 'available');
              setTimeout(() => {
                const addToCartButton = document.querySelector('.product-form__submit.button');
                addToCartButton.removeAttribute("disabled");
                firstAvailable.setAttribute('selected', 'selected')
                // firstAvailable.trigger('change');
                
                addToCartButton.querySelector('span').textContent = window.variantStrings.addToCart;
                addToCartButton.classList.remove('disabled');
              }, 20);
              console.log('target',target)
              target.dispatchEvent(new Event('change', { bubbles: true }));
            }
          }
          /*if (selectedOption.classList.contains('first-select-option')) {
            selectedOption.classList.add('disabled_option')
          }*/
        }
        
        // Handle radio buttons
        if (target.type === 'radio') {
          if (target.classList.contains('disabled')) {
            const radioGroup = document.querySelectorAll(`input[name="${target.name}"]`);
            const firstAvailable = Array.from(radioGroup).find(radio => 
              !radio.classList.contains('disabled')
            );
            if (firstAvailable) {
              firstAvailable.checked = true;
              firstAvailable.classList.remove('disabled');
              setTimeout(() => {
                const addToCartButton = document.querySelector('.product-form__submit.button');
                addToCartButton.removeAttribute("disabled");
                target.setAttribute('selected', 'selected')
                addToCartButton.querySelector('span').textContent = 'In den Warenkorb';
              }, 20);
              firstAvailable.dispatchEvent(new Event('change', { bubbles: true }));            
            }
          }
        }
      });
    });

    // Initial check for pre-selected disabled options
    /*document.querySelectorAll('select, input[type="radio"]').forEach(input => {
      if ((input.tagName === 'SELECT' && input.querySelector('option:checked.disabled_option')) || 
          (input.type === 'radio' && input.checked && input.classList.contains('disabled'))) {
        // input.dispatchEvent(new Event('change', { bubbles: true }));
      }
    });*/
  }
  // Initialize when variant controls exist
  if (document.querySelector('variant-selects')) {
    initVariantAutoSwitch();
    const variantSelects = document.querySelectorAll('.select__select');

    variantSelects.forEach(select => {
      /* 1. clear any <option selected> Shopify printed */
        select.options[0].classList.remove('disabled_option');
      [...select.options].forEach(o => o.removeAttribute('selected'));
  
      /* 2. select the placeholder (indexâ€¯0) */
      select.selectedIndex = 0;
      select.options[0].setAttribute('selected', 'selected'); // keeps the markup consistent
  
      /* 3. tell the theme JS that the selection changed */
      select.dispatchEvent(new Event('change', { bubbles: true }));
      setTimeout(() => {
      },1000);
    });
    
  }
</script> 